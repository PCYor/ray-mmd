#include "../../ray.conf"
#include "../../shader/math.fx"
#include "../../shader/common.fx"
#include "../../shader/gbuffer.fx"
#include "../../shader/gbuffer_sampler.fx"
#include "../../shader/lighting.fx"

float mR : CONTROLOBJECT < string name=RECTANGLELIGHT_CONTROLLER; string item = "R+"; >;
float mG : CONTROLOBJECT < string name=RECTANGLELIGHT_CONTROLLER; string item = "G+"; >;
float mB : CONTROLOBJECT < string name=RECTANGLELIGHT_CONTROLLER; string item = "B+"; >;
float mWidthP : CONTROLOBJECT < string name=RECTANGLELIGHT_CONTROLLER; string item = "Width+"; >;
float mHeightP : CONTROLOBJECT < string name=RECTANGLELIGHT_CONTROLLER; string item = "Height+"; >;
float mRangeP : CONTROLOBJECT < string name=RECTANGLELIGHT_CONTROLLER; string item = "Range+"; >;
float mIntensityM : CONTROLOBJECT < string name=RECTANGLELIGHT_CONTROLLER; string item = "Intensity-"; >;

float3 mPosition : CONTROLOBJECT < string name=RECTANGLELIGHT_CONTROLLER; string item = "Position"; >;
float3 mDirection : CONTROLOBJECT < string name=RECTANGLELIGHT_CONTROLLER; string item = "Direction"; >;

float3 mRightTop : CONTROLOBJECT < string name=RECTANGLELIGHT_CONTROLLER; string item = "RightTop"; >;
float3 mRightBottom : CONTROLOBJECT < string name=RECTANGLELIGHT_CONTROLLER; string item = "RightBottom"; >;

float mBlubP : CONTROLOBJECT < string name="ray_controller.pmx"; string item = "Blub"; >;

static float LightRange = (1 + mRangeP * RECTANGLELIGHT_MAX_RADIUS);
static float LightWidth = (1 + mWidthP * RECTANGLELIGHT_MAX_WIDTH);
static float LightHeight = (1 + mHeightP * RECTANGLELIGHT_MAX_HEIGHT);
static float LightIntensity = (1 - mIntensityM) * RECTANGLELIGHT_MAX_INTENSITY;

#if VIDEO_MAP_ENABLE && VIDEO_MAP_IN_TEXTURE != 1
    texture2D VideoMap<string ResourceName = VIDEO_MAP_FILE;>; 
    sampler VideoMapSamp = sampler_state
    {
        texture = VideoMap;
        MINFILTER = LINEAR; MAGFILTER = LINEAR; ADDRESSU = CLAMP; ADDRESSV = CLAMP;
    };
#elif VIDEO_MAP_ENABLE
    texture VideoMap: MATERIALTEXTURE;
    sampler VideoMapSamp = sampler_state
    {
        texture = <VideoMap>;
        MINFILTER = LINEAR; MAGFILTER = LINEAR; ADDRESSU = CLAMP; ADDRESSV = CLAMP;
    };
#endif

void RectangleLightingVS(
    in float4 Position : POSITION,
    in float3 Normal   : NORMAL,
    in float2 Texcoord : TEXCOORD0,
    out float4 oTexcoord  : TEXCOORD0,
    out float4 oPosition  : SV_Position)
{
    oTexcoord = Texcoord.xyxy + ViewportOffset.xyxy;
    oPosition = float4(CoordToPos(Texcoord), 0, 1);
}

float3 GetPosition(float2 uv)
{
    float depth = tex2D(Gbuffer4Map, uv).r;
    return ReconstructPos(uv, matProjectInverse, depth);
}

int RectangleLightDiffuse(float3 L, float3 lightDirection)
{
   return step(0, dot(L, lightDirection));
}

float4 GaussianBlur(sampler source, float2 coord, float2 offset, int radius, float sigma)
{
    float totalWeight = 0.0;
    float4 totalColor = 0.0;
  
    for (int i = -radius; i < radius; ++i)
    {
        float gaussianX = exp(-(i * i) / (2.0 * sigma * sigma));
        float offsetX = i * offset.x;
     
        for(int j = -radius; j < radius; ++j)
        {
            float gaussianY = exp(-(j * j) / (2.0 * sigma * sigma));

            float offsetY = j * offset.y;
            float4 color = tex2D(source, coord + float2(offsetX, offsetY));

            totalWeight += gaussianX * gaussianY;
            totalColor += color * gaussianX * gaussianY;
        }
    }

    return (totalColor / totalWeight);
}

float4 RectangleLightingPS(in float4 texcoord : TEXCOORD0) : SV_Target
{
    float4 MRT0 = tex2D(Gbuffer1Map, texcoord.xy);
    float4 MRT1 = tex2D(Gbuffer2Map, texcoord.xy);
    float4 MRT2 = tex2D(Gbuffer3Map, texcoord.xy);

    MaterialParam material;
    DecodeGbuffer(MRT0, MRT1, MRT2, material);
    
    float3 LightPosition = mul(float4(mPosition, 1), matView).xyz;
    float3 LightDirection = normalize(mul(mDirection - mPosition, (float3x3)matView));
    float3 LightRight = normalize(mul((mRightTop + mRightBottom) / 2 - mPosition, (float3x3)matView));
    float3 LightUp = normalize(cross(LightDirection, LightRight));
    float2 LightRect = float2(LightWidth, LightHeight);
    
    float2 coord1, coord2;
    
    float3 P = GetPosition(texcoord.xy);
    float3 V = normalize(-P);
    float3 L = LightPosition - P;
    float3 Lw = RectangleDirection(L, LightRight, LightUp, LightDirection, LightRect, coord1);
    float3 L2 = normalize(Lw);
    
    float3 diffuse = 0.0f;
    float3 specular = 0.0f;
    
    if (material.lightModel == LIGHTINGMODEL_NORMAL || material.lightModel == LIGHTINGMODEL_EMISSIVE)
        diffuse = material.albedo * DiffuseBRDF(material.normal, Lw, V, material.smoothness);
    else if (material.lightModel == LIGHTINGMODEL_TRANSMITTANCE)
        diffuse = material.albedo * TranslucencyBRDF(material.normal, Lw, material.transmittance);
        
#if VIDEO_MAP_ENABLE
    diffuse *= srgb2linear(GaussianBlur(VideoMapSamp, coord1, ViewportOffset2, 10, 10).rgb);
#endif
        
#if VIDEO_MAP_ENABLE
    specular = RectangleLightBRDFWithUV(material.normal, V, L, LightRight, LightUp, LightDirection, LightRect, material.smoothness, material.specular, coord2);
    specular *= srgb2linear(tex2D(VideoMapSamp, coord2 * vedioMapLoopNum).rgb);
#else
    specular = RectangleLightBRDF(material.normal, V, L, LightRight, LightUp, LightDirection, LightRect, material.smoothness, material.specular);
#endif

    float4 lighting = float4(diffuse + specular, 0);
    lighting *= float4(mR, mG, mB, 0);
    lighting *= LightIntensity;
    lighting *= GetPhysicalLightAttenuation(Lw, LightRange, 1 - mBlubP);
#if RECTANGLELIGHT_TWOSIDE_LIGHTING == 0
    lighting *= RectangleAttenuation(Lw, LightDirection, PI / 2, LightRange);
#endif

    return lighting;
}

#define OBJECT_TEC(name, mmdpass) \
    technique name < string MMDPass = mmdpass;\
    > { \
        pass DrawObject { \
            ZEnable = false; ZWriteEnable = false;\
            AlphaBlendEnable = TRUE; AlphaTestEnable = FALSE;\
            SrcBlend = ONE; DestBlend = ONE;\
            VertexShader = compile vs_3_0 RectangleLightingVS(); \
            PixelShader  = compile ps_3_0 RectangleLightingPS(); \
        } \
    }


OBJECT_TEC(MainTec0, "object")
OBJECT_TEC(MainTecBS0, "object_ss")

technique EdgeTec < string MMDPass = "edge"; > {}
technique ShadowTech < string MMDPass = "shadow";  > {}
technique ZplotTec < string MMDPass = "zplot"; > {}