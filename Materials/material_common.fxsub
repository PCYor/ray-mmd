float time : TIME;
float elapsed : ELAPSEDTIME;

float2 MousePositionn : MOUSEPOSITION;

float4x4 matWorld                 : WORLD;
float4x4 matWorldView             : WORLDVIEW;
float4x4 matWorldViewProject      : WORLDVIEWPROJECTION;
float4x4 matView                  : VIEW;
float4x4 matViewInverse           : VIEWINVERSE;
float4x4 matProject               : PROJECTION;
float4x4 matProjectInverse        : PROJECTIONINVERSE;
float4x4 matViewProject           : VIEWPROJECTION;
float4x4 matViewProjectInverse    : VIEWPROJECTIONINVERSE;

float3 CameraPosition  : POSITION  < string Object = "Camera"; >;
float3 CameraDirection : DIRECTION < string Object = "Camera"; >;

float3  LightDiffuse    : DIFFUSE   < string Object = "Light"; >;
float3  LightSpecular   : SPECULAR  < string Object = "Light"; >;
float3  LightDirection  : DIRECTION < string Object = "Light"; >;

float4  MaterialDiffuse     : DIFFUSE  < string Object = "Geometry"; >;
float3  MaterialAmbient     : AMBIENT  < string Object = "Geometry"; >;
float3  MaterialEmissive    : EMISSIVE < string Object = "Geometry"; >;
float3  MaterialSpecular    : SPECULAR < string Object = "Geometry"; >;
float3  MaterialToon        : TOONCOLOR;
float   MaterialPower       : SPECULARPOWER < string Object = "Geometry"; >;

float4  TextureAddValue   : ADDINGTEXTURE;
float4  TextureMulValue   : MULTIPLYINGTEXTURE;
float4  SphereAddValue    : ADDINGSPHERETEXTURE;
float4  SphereMulValue    : MULTIPLYINGSPHERETEXTURE;

float2 ViewportSize : VIEWPORTPIXELSIZE;

static float2 ViewportOffset  = (float2(0.5,0.5) / ViewportSize);
static float2 ViewportOffset2 = (float2(1.0,1.0) / ViewportSize);
static float2 ViewportAspect  = float2(1, ViewportSize.x / ViewportSize.y);

uniform bool use_texture;
uniform bool use_subtexture;
uniform bool use_spheremap;
uniform bool use_toon;

uniform bool opadd;

#define AlphaThreshold 0.5

#define PI 3.141592654f

#define InvLog2 3.32192809489f

#define LIGHTINGMODEL_NORMAL         0
#define LIGHTINGMODEL_TRANSMITTANCE  1
#define LIGHTINGMODEL_EMISSIVE       2

#define SUBSURFACESCATTERING_MARBLE 0
#define SUBSURFACESCATTERING_SKIN   1

#define MAX_FRACTIONAL_8_BIT        (255.0f / 256.0f)
#define TWO_BITS_EXTRACTION_FACTOR  (3.0f + MAX_FRACTIONAL_8_BIT)

shared texture Gbuffer2RT: RENDERCOLORTARGET;
shared texture Gbuffer3RT: RENDERCOLORTARGET;
shared texture Gbuffer4RT: RENDERCOLORTARGET;

struct MaterialParam
{
    float3 normal;
    float3 albedo;
    float3 specular;
    float3 transmittance;
    float3 emissive;
    float smoothness;
    float index;
    int lightModel;
};

struct GbufferParam
{
    float4 buffer1 : COLOR0;
    float4 buffer2 : COLOR1;
    float4 buffer3 : COLOR2;
    float4 buffer4 : COLOR3;
};

float3 EncodeNormal(float3 normal)
{
    float p = sqrt(-normal.z * 8 + 8);
    float2 enc = normal.xy / p + 0.5f;
    float2 enc255 = enc * 255;
    float2 residual = floor(frac(enc255) * 16);
    return float3(floor(enc255), residual.x * 16 + residual.y) / 255;
}

float3 DecodeNormal(float3 enc)
{
    float nz = floor(enc.z * 255) / 16;
    enc.xy += float2(floor(nz) / 16, frac(nz)) / 255;
    float2 fenc = enc.xy * 4 - 2;
    float f = dot(fenc, fenc);
    float g = sqrt(1 - f / 4);
    float3 normal;
    normal.xy = fenc * g;
    normal.z = f / 2 - 1;
    return normalize(normal);
}

float luminance(float3 rgb)
{
    const float3 lumfact = float3(0.2126f, 0.7152f, 0.0722f);
    return dot(rgb, lumfact);
}

float3 srgb2linear(float3 rgb)
{
    const float ALPHA = 0.055f;
    return rgb < 0.04045f ? rgb / 12.92f : pow((rgb + ALPHA) / (1 + ALPHA), 2.4f);
}

float3 linear2srgb(float3 srgb)
{
    const float ALPHA = 0.055f;
    return srgb < 0.0031308f ? 12.92f * srgb : (1 + ALPHA) * pow(srgb, 1.0f / 2.4f) - ALPHA;
}

float4 srgb2linear(float4 c)
{
    return float4(srgb2linear(c.rgb), c.a);
}

float4 linear2srgb(float4 c)
{
    return float4(linear2srgb(c.rgb), c.a);
}

float3 rgb2ycbcr(float3 rgb)
{
    float Y = 0.299 * rgb.r + 0.587 * rgb.g + 0.114 * rgb.b;
    float Cb = 0.5 + (-0.168 * rgb.r - 0.331 * rgb.g + 0.5 * rgb.b);
    float Cr = 0.5 + (0.5 * rgb.r - 0.418 * rgb.g - 0.081 * rgb.b);
    return float3(Y, Cb, Cr);
}

float3 ycbcr2rgb(float3 YCbCr)
{
    float R = YCbCr.r + 1.402 * (YCbCr.b - 0.5);
    float G = YCbCr.r - 0.344 * (YCbCr.g - 0.5) - 0.714 * (YCbCr.b - 0.5);
    float B = YCbCr.r + 1.772 * (YCbCr.g - 0.5);
    return float3(R, G, B);
}

float2 CoordToPos(float2 coord)
{
    coord.y = 1 - coord.y;
    return coord * 2 - 1;
}

float3x3 computeTangentBinormalNormal(float3 N, float3 viewdir, float2 coord)
{
    float3 dp1 = ddx(viewdir);
    float3 dp2 = ddy(viewdir);
    float2 duv1 = ddx(coord);
    float2 duv2 = ddy(coord);

    float3x3 M = float3x3(dp1, dp2, cross(dp1, dp2));
    float2x3 I = float2x3(cross(M[1], M[2]), cross(M[2], M[0]));
    float3 T = mul(float2(duv1.x, duv2.x), I);
    float3 B = mul(float2(duv1.y, duv2.y), I);

    return float3x3(normalize(T), normalize(B), N);
}

GbufferParam EncodeGbuffer(MaterialParam material, float linearDepth)
{
    GbufferParam gbuffer;
    gbuffer.buffer1.xyz = material.albedo;
    gbuffer.buffer1.w = material.smoothness;

    gbuffer.buffer2.xyz = EncodeNormal(normalize(material.normal));
    gbuffer.buffer2.w = material.index;

    gbuffer.buffer3.xyz = rgb2ycbcr(material.specular);
    gbuffer.buffer3.w = 0;

    if (material.lightModel == LIGHTINGMODEL_TRANSMITTANCE)
    {
        material.transmittance = rgb2ycbcr(material.transmittance);
        gbuffer.buffer3.yz = material.transmittance.gb;
        gbuffer.buffer3.w = material.transmittance.r * MAX_FRACTIONAL_8_BIT;
    }
    else if (material.lightModel == LIGHTINGMODEL_EMISSIVE)
    {
        material.emissive = rgb2ycbcr(material.emissive);
        gbuffer.buffer3.yz = material.emissive.gb;
        gbuffer.buffer3.w = material.emissive.r * MAX_FRACTIONAL_8_BIT;
    }

    gbuffer.buffer3.w = ((float)material.lightModel + gbuffer.buffer3.w) / TWO_BITS_EXTRACTION_FACTOR;
    
    gbuffer.buffer4 = linearDepth;
    
    return gbuffer;
}

float SmoothnessToRoughness(float smoothness)
{
    return (1.0f - smoothness) * (1.0f - smoothness);
}

float RoughnessToSmoothness(float roughness)
{
    return 1.0f - sqrt(roughness);
}

float ShininessToSmoothness(float spec)
{
    // http://simonstechblog.blogspot.de/2011/12/microfacet-brdf.html
    return RoughnessToSmoothness(sqrt(2.0 / (spec + 2)));
}

float SmoothnessToShininess(float smoothness)
{
    float roughness = SmoothnessToRoughness(smoothness);
    return 2.0f / (roughness * roughness) - 2.0f;
}

float fresnelSchlick(float f0, float f9, float LdotH)
{
    return lerp(f0, f9, exp2((-5.55473 * LdotH - 6.98316) * LdotH));
}

float3 fresnelSchlick(float3 f0, float f9, float LdotH)
{
    return lerp(f0, f9, exp2((-5.55473 * LdotH - 6.98316) * LdotH));
}

float OrenNayarBRDF(float3 N, float3 L, float3 V, float roughness)
{
    float sigma2 = roughness * roughness;

    float nl = dot(N, L);
    float nv = dot(N, V);
    float lv = dot(L, V);

    float s = lv - nl * nv;
    float t = s <= 0 ? 1 : max(max(nl, nv), 1e-6);
    float A = 1.0 / (1.0 + (0.5 - 2.0 / (3.0 * PI)) * sigma2);
    float B = A * sigma2;

    return max(0, nl) * max(A + B * (s / t), 0);
}

float BurleyBRDF(float3 N, float3 L, float3 V, float roughness)
{
    float3 H = normalize(V + L);

    float energyBias = 0.5 * roughness;
    float energyFactor = lerp(1, 1 / 1.51, roughness);

    float nl = saturate(dot(N, L));
    float vh = saturate(dot(V, H));
    float nv = abs(dot(N, V)) + 1e-5h;

    float fd90 = energyBias + 2.0 * vh * vh * roughness;

    float FL = fresnelSchlick(1, fd90, nl);
    float FV = fresnelSchlick(1, fd90, nv);

    return FL * FV * energyFactor * nl;
}

float DiffuseBRDF(float3 N, float3 L, float3 V, float gloss)
{
    float roughness = SmoothnessToRoughness(gloss);
    return BurleyBRDF(N, L, V, roughness);
}

float3 TranslucencyBRDF(float3 N, float3 L, float3 transmittanceColor)
{
    float w = lerp(0, 0.5, luminance(transmittanceColor));
    float wn = 1.0 / ((1 + w) * (1 + w));
    float nl = dot(N, L);
    float transmittance = saturate((-nl + w) * wn);
    float diffuse = saturate((nl + w) * wn);
    return diffuse + transmittanceColor * transmittance;
}

float3 TranslucencyBRDF(float3 N, float3 L, float3 V, float smoothness, float3 transmittanceColor)
{
    float w = lerp(0, 0.5, luminance(transmittanceColor));
    float wn = 1.0 / ((1 + w) * (1 + w));
    float nl = dot(N, L);
    float transmittance = saturate((-nl + w) * wn);
    float brdf = DiffuseBRDF(N, L, V, smoothness);
    float diffuse = saturate((brdf + w) * wn);
    return diffuse + transmittanceColor * transmittance;
}

float3 SpecularBRDF_BlinnPhong(float3 N, float3 L, float3 V, float gloss, float3 f0)
{
    float3 H = normalize(L + V);

    float nh = saturate(dot(N, H));
    float nl = saturate(dot(N, L));
    float lh = saturate(dot(L, H));

    float alpha = exp2(10 * gloss + 1); // 2 - 2048
    float D =  ((alpha + 2) / 8) * exp2(alpha * InvLog2 * nh - alpha * InvLog2);

    float k = min(1.0f, gloss + 0.545f);
    float G = 1.0 / (k * lh * lh + 1 - k);

    float3 F = fresnelSchlick(f0, 1.0, lh);

    return D * F * G * nl;
}

float3 SpecularBRDF(float3 N, float3 L, float3 V, float m, float3 f0, float NormalizationFactor)
{
    float m2 = m * m;
    float3 H = normalize( V + L );

    float NdotH = saturate( dot( N, H ) );
    float NdotL = saturate( dot( N, L ) );
    float NdotV = abs( dot( N, V ) ) + 1e-5h;

    float spec = (NdotH * m2 - NdotH) * NdotH + 1;
    spec = m2 / (spec * spec) * NormalizationFactor;

    float Gv = NdotL * sqrt( (-NdotV * m2 + NdotV) * NdotV + m2 );
    float Gl = NdotV * sqrt( (-NdotL * m2 + NdotL) * NdotL + m2 );
    spec *= 0.5h / (Gv + Gl);

    f0 = max(0.04, f0);
    float f90 = saturate( dot( f0, 0.33333h ) / 0.02h );
    float3 fresnel = lerp( f0, f90, pow( 1 - saturate( dot( L, H ) ), 5 ) );

    return fresnel * spec * NdotL;
}

float3 SpecularBRDF(float3 N, float3 L, float3 V, float gloss, float3 f0)
{
    float roughness = SmoothnessToRoughness(gloss);
    return SpecularBRDF(N, L, V, roughness, f0, 1.0f);
}

#if USE_CUSTOM_MATERIAL && ALBEDO_MAP_ENABLE && ALBEDO_MAP_IN_TEXTURE != 1
    texture2D AlbedoMap<string ResourceName = ALBEDO_MAP_FILE;>; 
    sampler AlbedoMapSamp = sampler_state
    {
        texture = AlbedoMap;
        MINFILTER = LINEAR; MAGFILTER = LINEAR; ADDRESSU = WRAP; ADDRESSV = WRAP;
    };
#endif

#if USE_CUSTOM_MATERIAL && NORMAL_MAP_ENABLE && NORMAL_MAP_IN_SPHEREMAP != 1
    texture2D NormalMap<string ResourceName = NORMAL_MAP_FILE;>; 
    sampler NormalMapSamp = sampler_state
    {
        texture = NormalMap;
        MINFILTER = LINEAR; MAGFILTER = LINEAR; ADDRESSU = WRAP; ADDRESSV = WRAP;
    };
#endif

#if USE_CUSTOM_MATERIAL && NORMAL_MAP_SUB_ENABLE
    texture2D NormalSubMap<string ResourceName = NORMAL_MAP_SUB_FILE;>; 
    sampler NormalSubMapSamp = sampler_state
    {
        texture = NormalSubMap;
        MINFILTER = LINEAR; MAGFILTER = LINEAR; ADDRESSU = WRAP; ADDRESSV = WRAP;
    };
#endif

#if USE_CUSTOM_MATERIAL && SMOOTHNESS_MAP_ENABLE && SMOOTHNESS_MAP_IN_TONEMAP != 1
    texture2D SmoothnessMap<string ResourceName = SMOOTHNESS_MAP_FILE;>; 
    sampler SmoothnessMapSamp = sampler_state
    {
        texture = SmoothnessMap;
        MINFILTER = LINEAR; MAGFILTER = LINEAR; ADDRESSU = WRAP; ADDRESSV = WRAP;
    };
#endif

#if USE_CUSTOM_MATERIAL && METALNESS_MAP_ENABLE && METALNESS_MAP_IN_TONEMAP != 1
    texture2D MetalnessMap<string ResourceName = METALNESS_MAP_FILE;>; 
    sampler MetalnessMapSamp = sampler_state
    {
        texture = MetalnessMap;
        MINFILTER = LINEAR; MAGFILTER = LINEAR; ADDRESSU = WRAP; ADDRESSV = WRAP;
    };
#endif

#if USE_CUSTOM_MATERIAL && SSS_MAP_ENABLE
    texture2D TransmittanceMap<string ResourceName = SSS_MAP_FILE;>; 
    sampler TransmittanceMapSamp = sampler_state
    {
        texture = TransmittanceMap;
        MINFILTER = LINEAR; MAGFILTER = LINEAR; ADDRESSU = WRAP; ADDRESSV = WRAP;
    };
#endif

#if USE_CUSTOM_MATERIAL && MELANIN_MAP_ENABLE
    texture2D MelaninMap<string ResourceName = MELANIN_MAP_FILE;>; 
    sampler MelaninMapSamp = sampler_state
    {
        texture = MelaninMap;
        MINFILTER = LINEAR; MAGFILTER = LINEAR; ADDRESSU = WRAP; ADDRESSV = WRAP;
    };
#endif

#if USE_CUSTOM_MATERIAL && EMMISIVE_ENABLE && EMMISIVE_MAP_ENABLE && EMMISIVE_IN_TEXTURE != 1
    texture2D EmissiveMap<string ResourceName = EMMISIVE_MAP_FILE;>; 
    sampler EmissiveMapSamp = sampler_state
    {
        texture = EmissiveMap;
        MINFILTER = LINEAR; MAGFILTER = LINEAR; ADDRESSU = WRAP; ADDRESSV = WRAP;
    };
#endif

texture DiffuseMap: MATERIALTEXTURE;
sampler DiffuseMapSamp = sampler_state
{
    texture = <DiffuseMap>;
    MINFILTER = LINEAR; MAGFILTER = LINEAR; ADDRESSU = WRAP; ADDRESSV = WRAP;
};

texture SphereMap : MATERIALSPHEREMAP;
sampler SphereMapSamp = sampler_state {
    texture = <SphereMap>;
    MINFILTER = LINEAR;
    MAGFILTER = LINEAR;
    ADDRESSU  = WRAP;
    ADDRESSV  = WRAP;
};

texture ToneMap : MATERIALTOONTEXTURE;
sampler ToneMapSamp = sampler_state {
    texture = <ToneMap>;
    MINFILTER = LINEAR;
    MAGFILTER = LINEAR;
    ADDRESSU  = WRAP;
    ADDRESSV  = WRAP;
};

struct VS_OUTPUT
{
    float4 Position : POSITION;
    float3 Normal   : TEXCOORD0;
    float2 Texcoord : TEXCOORD1;
    float  Distance : TEXCOORD2;
    float3 Viewdir  : TEXCOORD3; 
};

float3 ColorSynthesis(float3 diffuse, float m)
{
    float3 melanin = diffuse * luminance(diffuse);
    return diffuse * lerp(1.0, melanin, m);
}

float4 GetTextureColor(float2 uv, bool use_texture)
{
#if SKYBOX_ENABLE
    return float4(0,0,0,1);
#endif
#if USE_CUSTOM_MATERIAL
    #if ALBEDO_MAP_UV_FLIP
        uv.y = 1 - uv.y;
    #endif
    #if  ALBEDO_MAP_ENABLE
        float4 diffuse = MaterialDiffuse;
        #if ALBEDO_MAP_IN_TEXTURE
            if (use_texture)
            {
                #if ALBEDO_MAP_APPLY_COLOR
                    return albedo * srgb2linear(albedo * tex2D(DiffuseMapSamp, uv * albedoMapLoopNum));
                #else
                    return diffuse * srgb2linear(tex2D(DiffuseMapSamp, uv * albedoMapLoopNum));
                #endif
            }
            else
            {
                return srgb2linear(diffuse);
            }
        #else
            #if ALBEDO_MAP_APPLY_COLOR
                return albedo * srgb2linear(albedo * tex2D(AlbedoMapSamp, uv * albedoMapLoopNum));
            #else
                return srgb2linear(tex2D(AlbedoMapSamp, uv * albedoMapLoopNum));
            #endif
        #endif
    #else
        return srgb2linear(albedo);
    #endif
#else
    float4 diffuse = MaterialDiffuse;
    if (use_texture)
    {
        float4 TexColor = tex2D(DiffuseMapSamp, uv * albedoMapLoopNum);
        TexColor.rgb = lerp(1, TexColor * TextureMulValue + TextureAddValue, TextureMulValue.a + TextureAddValue.a).rgb;
        TexColor.rgb = TexColor.rgb;
        diffuse *= TexColor;
    }
    
    return srgb2linear(diffuse);
#endif
}

float3 GetEmissiveColor(float2 uv)
{
#if EMMISIVE_ENABLE && USE_CUSTOM_MATERIAL
    #if EMMISIVE_MAP_UV_FLIP
        uv.y = 1 - uv.y;
    #endif
    #if EMMISIVE_IN_TEXTURE
        #if EMMISIVE_APPLY_COLOR
            return srgb2linear(emmisive.rgb * tex2D(DiffuseMapSamp, uv * emmisiveMapLoopNum).rgb);
        #else
            return srgb2linear(tex2D(DiffuseMapSamp, uv * emmisiveMapLoopNum).rgb);
        #endif
    #elif EMMISIVE_MAP_ENABLE
        #if EMMISIVE_APPLY_COLOR
            return srgb2linear(emmisive.rgb * tex2D(EmissiveMapSamp, uv * emmisiveMapLoopNum).rgb);
        #else
            return srgb2linear(tex2D(EmissiveMapSamp, uv * emmisiveMapLoopNum).rgb);
        #endif
    #else
        return emmisive.rgb;
    #endif
#else
    return 0.0f;
#endif
}

float3 GetNormal(float3 N, float3 viewdir, float2 coord)
{
#if USE_CUSTOM_MATERIAL
    #if NORMAL_MAP_ENABLE
        #if NORMAL_MAP_UV_FLIP
            coord.y = 1 - coord.y;
        #endif    
        #if NORMAL_MAP_IN_SPHEREMAP
            float3 tangentNormal = normalize(tex2D(SphereMapSamp, coord * normalMapLoopNum).rgb * 2 - 1);
        #else    
            float3 tangentNormal = normalize(tex2D(NormalMapSamp, coord * normalMapLoopNum).rgb * 2 - 1);
        #endif
        
        tangentNormal = lerp(float3(0,0,1), tangentNormal, normalMapScale);
        
        #if NORMAL_MAP_SUB_ENABLE
            #if NORMAL_MAP_SUB_UV_FLIP && NORMAL_MAP_UV_FLIP == 0
                coord.y = 1 - coord.y;
            #endif
            #if NORMAL_MAP_SUB_UV_ROTATE
                coord = float2(coord.y, coord.x);
            #endif
        
            float3 tangentSubNormal = normalize(tex2D(NormalSubMapSamp, coord * normalMapSubLoopNum).rgb * 2 - 1);
            tangentSubNormal = lerp(float3(0,0,1), tangentSubNormal, normalMapSubScale);
            tangentSubNormal = normalize(tangentSubNormal);
            
            #if NORMAL_MAP_SUB_NORMAL_ROTATE
                float c, s;
                sincos(normalMapSubRotate, c, s);
                float2 coord2;
                coord2.x = tangentSubNormal.x * c + tangentSubNormal.y * s;
                coord2.y = tangentSubNormal.x * -s + tangentSubNormal.y * c;
                tangentSubNormal.xy = coord2;
            #endif
            
            tangentNormal.rg += tangentSubNormal.rg;
            tangentNormal.rgb = normalize(tangentNormal.rgb);
        #endif
        
        float3x3 tangentFrame = computeTangentBinormalNormal(N, viewdir, coord);
        float3 highNormal = normalize(mul(tangentNormal, tangentFrame));
        return highNormal;
    #else
        return N;
    #endif
#else
    return N;
#endif
}

float GetSmoothness(float2 coord)
{
#if USE_CUSTOM_MATERIAL
    #if SMOOTHNESS_MAP_ENABLE
        #if SMOOTHNESS_MAP_UV_FLIP
            coord.y = 1 - coord.y;
        #endif
    
        sampler smoothnessMapSamper;
        #if SMOOTHNESS_MAP_IN_TONEMAP
            smoothnessMapSamper = ToneMapSamp;
        #else
            smoothnessMapSamper = SmoothnessMapSamp;
        #endif
        
        float smoothness = 0;
        #if SMOOTHNESS_MAP_SWIZZLE_R
            smoothness = tex2D(smoothnessMapSamper, coord * smoothnessMapLoopNum).r;
        #elif SMOOTHNESS_MAP_SWIZZLE_G
            smoothness = tex2D(smoothnessMapSamper, coord * smoothnessMapLoopNum).g;
        #elif SMOOTHNESS_MAP_SWIZZLE_B
            smoothness = tex2D(smoothnessMapSamper, coord * smoothnessMapLoopNum).b;
        #elif SMOOTHNESS_MAP_SWIZZLE_A
            smoothness = tex2D(smoothnessMapSamper, coord * smoothnessMapLoopNum).a;
        #else
            smoothness = tex2D(smoothnessMapSamper, coord * smoothnessMapLoopNum).r;
        #endif
        
        #if SMOOTHNESS_MAP_IS_ROUGHNESS
            smoothness = 1 - smoothness;
        #endif
        
        return smoothness;
    #else
        #if SMOOTHNESS_MAP_IS_ROUGHNESS
            return RoughnessToSmoothness(smoothness);
        #endif
        
        return smoothness;
    #endif
#else
    return ShininessToSmoothness(MaterialPower);
#endif
}

float GetMetalness(float2 coord)
{
#if USE_CUSTOM_MATERIAL
    #if METALNESS_MAP_ENABLE
        #if METALNESS_MAP_UV_FLIP
            coord.y = 1 - coord.y;
        #endif
        
        #if METALNESS_MAP_IN_TONEMAP
            sampler metalnessMapSamper = ToneMapSamp;
        #else
            sampler metalnessMapSamper = MetalnessMapSamp;
        #endif
        
        #if METALNESS_MAP_SWIZZLE_R
            return tex2D(metalnessMapSamper, coord * metalnessMapLoopNum).r;
        #elif METALNESS_MAP_SWIZZLE_G
            return tex2D(metalnessMapSamper, coord * metalnessMapLoopNum).g;
        #elif METALNESS_MAP_SWIZZLE_B
            return tex2D(metalnessMapSamper, coord * metalnessMapLoopNum).b;
        #elif METALNESS_MAP_SWIZZLE_A
            return tex2D(metalnessMapSamper, coord * metalnessMapLoopNum).a;
        #else
            return tex2D(metalnessMapSamper, coord * metalnessMapLoopNum).r;
        #endif
    #else
        return metalness;
    #endif
#else
    return 0.0f;
#endif
}

float3 SkinTransmittance(float translucency)
{
    return exp((1 - saturate(translucency)) * float3(-8, -40, -64));
}

float4 GetTransmittance(float2 coord)
{
#if USE_CUSTOM_MATERIAL
    #if SSS_ENABLE
        #if SSS_MAP_ENABLE
            #if SSS_MAP_UV_FLIP
                coord.y = 1 - coord.y;
            #endif
        
            return srgb2linear(tex2D(TransmittanceMapSamp, coord * transmittanceMapLoopNum));
        #else
            return transmittance;
        #endif
    #else
        return 0.0f;
    #endif
#else
    return 0.0;
#endif
}

float GetMelanin(float2 coord)
{
#if USE_CUSTOM_MATERIAL
    #if MELANIN_MAP_ENABLE
        #if MELANIN_MAP_UV_FLIP
            coord.y = 1 - coord.y;
        #endif
    
        #if MELANIN_MAP_SWIZZLE_R
            return tex2D(MelaninMapSamp, coord * metalnessMapLoopNum).r;
        #elif MELANIN_MAP_SWIZZLE_G
            return tex2D(MelaninMapSamp, coord * metalnessMapLoopNum).g;
        #elif MELANIN_MAP_SWIZZLE_B
            return tex2D(MelaninMapSamp, coord * metalnessMapLoopNum).b;
        #elif MELANIN_MAP_SWIZZLE_A
            return tex2D(MelaninMapSamp, coord * metalnessMapLoopNum).a;
        #else
            return tex2D(MelaninMapSamp, coord * metalnessMapLoopNum).r;
        #endif
    #else
        return melanin;
    #endif
#else
    return 0.0;
#endif
}

VS_OUTPUT MaterialVS(float4 Position : POSITION, float3 Normal : NORMAL, float2 Texcoord: TEXCOORD0)
{
    VS_OUTPUT Out;
    Out.Position = mul(Position, matWorldViewProject);
    Out.Normal = normalize(mul(Normal, (float3x3)matWorldView));
    Out.Texcoord = Texcoord;
    Out.Distance = Out.Position.w;
    Out.Viewdir = mul(CameraPosition - mul(Position, matWorld).xyz, (float3x3)matView);
    return Out;
}

GbufferParam MaterialPS(VS_OUTPUT IN, uniform bool useTexture, uniform bool useSphereMap)
{
    float4 albedo = GetTextureColor(IN.Texcoord, useTexture);
    albedo.rgb = ColorSynthesis(albedo.rgb, GetMelanin(IN.Texcoord));

    clip(albedo.a - AlphaThreshold);
    
    float MaterialMetalness = GetMetalness(IN.Texcoord);

    MaterialParam material;
    material.index = 0;
    material.normal = GetNormal(normalize(IN.Normal), normalize(-IN.Viewdir), IN.Texcoord);
    material.smoothness = GetSmoothness(IN.Texcoord);
    material.albedo = albedo.rgb * (1.0 - MaterialMetalness);
    material.specular = lerp(0.04, albedo.rgb, MaterialMetalness);
    material.transmittance = GetTransmittance(IN.Texcoord) * (1.0 - MaterialMetalness);
    material.emissive = GetEmissiveColor(IN.Texcoord);
    
#if SSS_ENABLE
    material.lightModel = LIGHTINGMODEL_TRANSMITTANCE;
#   if defined(SSS_SKIN_ENABLE)
        material.index = SUBSURFACESCATTERING_SKIN;
#   elif defined(USE_CUSTOM_MATERIAL)
        material.index = SUBSURFACESCATTERING_MARBLE;
#   endif
#elif EMMISIVE_ENABLE
    material.lightModel = LIGHTINGMODEL_EMISSIVE;
#else
    material.lightModel = LIGHTINGMODEL_NORMAL;
#endif

    return EncodeGbuffer(material, IN.Distance);
}

#define OBJECT_TEC(name, mmdpass, tex, sphere) \
    technique name < string MMDPass = mmdpass; bool UseTexture = tex; bool UseSphereMap = sphere; \
    string Script = \
        "RenderColorTarget0=;" \
        "RenderColorTarget1=Gbuffer2RT;" \
        "RenderColorTarget2=Gbuffer3RT;" \
        "RenderColorTarget3=Gbuffer4RT;" \
        "RenderDepthStencilTarget=;" \
        "Pass=DrawObject;" \
        "RenderColorTarget1=;" \
        "RenderColorTarget2=;" \
    ; \
    > { \
        pass DrawObject { \
            AlphaTestEnable = FALSE; AlphaBlendEnable = FALSE; \
            VertexShader = compile vs_3_0 MaterialVS(); \
            PixelShader  = compile ps_3_0 MaterialPS(tex, sphere); \
        } \
    }

OBJECT_TEC(MainTec0, "object", false, false)
OBJECT_TEC(MainTec1, "object", true, false)
OBJECT_TEC(MainTec2, "object", false, true)
OBJECT_TEC(MainTec3, "object", true, true)
OBJECT_TEC(MainTecBS0, "object_ss", false, false)
OBJECT_TEC(MainTecBS1, "object_ss", true, false)
OBJECT_TEC(MainTecBS2, "object_ss", false, true)
OBJECT_TEC(MainTecBS3, "object_ss", true, true)

technique EdgeTec < string MMDPass = "edge"; > {}
technique ShadowTech < string MMDPass = "shadow";  > {}
technique ZplotTec < string MMDPass = "zplot"; > {}